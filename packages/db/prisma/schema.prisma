generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum Tier {
  free
  pro
}

enum Role {
  member
  admin
}

// Authentication and Organization

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  full_name     String?
  email         String?   @unique
  role          Role      @default(member)
  onboarded     Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  lastLogin     DateTime?

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  accounts           Account[]
  sessions           Session[]
  Risk               Risk[]
  RiskMitigationTask RiskMitigationTask[]
  RiskComment        RiskComment[]
  AuditLog           AuditLog[]
  TaskAttachment     TaskAttachment[]
  TaskComments       TaskComments[]

  @@index([organizationId])
}

model Organization {
  id               String  @id @default(cuid())
  stripeCustomerId String?
  name             String
  website          String
  tier             Tier    @default(free)

  users              User[]
  Risk               Risk[]
  AuditLog           AuditLog[]
  RiskMitigationTask RiskMitigationTask[]
  TaskAttachment     TaskAttachment[]
  TaskComments       TaskComments[]
  RiskComment        RiskComment[]

  Framework             Framework?              @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  frameworkId           String?
  OrganizationControl   OrganizationControl[]
  Artifact              Artifact[]
  OrganizationFramework OrganizationFramework[]

  @@index([stripeCustomerId])
}

model AuditLog {
  id String @id @default(cuid())

  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  data Json

  @@index([userId])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Frameworks and Controls
enum FrameworkStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ComplianceStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ArtifactType {
  policy
  evidence
  procedure
  training
}

model Framework {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "GDPR", "SOC 2"
  description String?
  version     String // e.g., "2016/679" for GDPR

  categories            FrameworkCategory[]
  organizations         Organization[]
  OrganizationFramework OrganizationFramework[]

  @@index([id])
}

model OrganizationFramework {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  frameworkId    String
  framework      Framework    @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  status         FrameworkStatus @default(not_started)
  adoptedAt      DateTime        @default(now())
  lastAssessed   DateTime?
  nextAssessment DateTime?

  organizationControl OrganizationControl[]

  @@unique([organizationId, frameworkId])
}

model FrameworkCategory {
  id          String  @id @default(cuid())
  name        String
  code        String  @unique
  description String?

  frameworkId String
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  controls Control[]

  @@index([frameworkId])
}

model Control {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  categoryId String
  category   FrameworkCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  requiredArtifactTypes ArtifactType[] // What types of artifacts are needed
  organizationControls  OrganizationControl[]

  @@index([categoryId])
}

model OrganizationControl {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  controlId      String
  control        Control      @relation(fields: [controlId], references: [id], onDelete: Cascade)

  status         ComplianceStatus @default(not_started)
  lastReviewDate DateTime?
  nextReviewDate DateTime?

  artifacts               ControlArtifact[]
  OrganizationFramework   OrganizationFramework? @relation(fields: [organizationFrameworkId], references: [id])
  organizationFrameworkId String?

  @@index([organizationId])
  @@index([organizationFrameworkId])
  @@index([controlId])
}

model Artifact {
  id          String  @id @default(cuid())
  name        String
  published   Boolean @default(false)
  needsReview Boolean @default(true)

  type        ArtifactType
  content     String?
  fileUrl     String?
  version     Int          @default(1)
  lastUpdated DateTime?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  controls ControlArtifact[]

  @@index([organizationId])
}

model ControlArtifact {
  id                    String              @id @default(cuid())
  organizationControlId String
  organizationControl   OrganizationControl @relation(fields: [organizationControlId], references: [id], onDelete: Cascade)
  artifactId            String
  artifact              Artifact            @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  @@index([organizationControlId])
  @@index([artifactId])
}

// Risk Register

enum RiskLevel {
  low
  medium
  high
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum Departments {
  none
  admin
  gov
  hr
  it
  itsm
  qms
}

enum TreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskStatus {
  open
  pending
  closed
  archived
}

enum RiskTaskStatus {
  open
  pending
  closed
}

enum RiskAttachmentType {
  file
  url
}

model Risk {
  id                   String       @id @default(cuid())
  title                String
  description          String
  category             RiskCategory
  department           Departments?
  status               RiskStatus   @default(open)
  probability          Int          @default(0)
  impact               Int          @default(0)
  residual_probability Int          @default(0)
  residual_impact      Int          @default(0)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ownerId        String?
  owner          User?        @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  mitigationTasks   RiskMitigationTask[]
  comments          RiskComment[]
  treatmentStrategy RiskTreatmentStrategy?
  TaskComments      TaskComments[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([category])
  @@index([status])
}

model RiskComment {
  id String @id @default(cuid())

  riskId String
  risk   Risk   @relation(fields: [riskId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([riskId])
  @@index([ownerId])
  @@index([organizationId])
}

model RiskMitigationTask {
  id          String         @id @default(cuid())
  title       String
  description String
  status      RiskTaskStatus @default(open)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  riskId  String
  risk    Risk    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  TaskAttachment TaskAttachment[]
  TaskComments   TaskComments[]

  @@index([riskId])
  @@index([ownerId])
  @@index([organizationId])
}

model TaskComments {
  id String @id @default(cuid())

  riskId String
  risk   Risk   @relation(fields: [riskId], references: [id], onDelete: Cascade)

  riskMitigationTaskId String
  riskMitigationTask   RiskMitigationTask @relation(fields: [riskMitigationTaskId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([riskId])
  @@index([riskMitigationTaskId])
  @@index([organizationId])
}

model TaskAttachment {
  id String @id @default(cuid())

  riskMitigationTaskId String
  riskMitigationTask   RiskMitigationTask @relation(fields: [riskMitigationTaskId], references: [id], onDelete: Cascade)

  name           String
  fileUrl        String
  type           RiskAttachmentType @default(file)
  uploadedAt     DateTime           @default(now())
  ownerId        String?
  owner          User?              @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([riskMitigationTaskId])
  @@index([organizationId])
}

model RiskTreatmentStrategy {
  id          String        @id @default(cuid())
  type        TreatmentType
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  riskId String @unique
  risk   Risk   @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@index([riskId])
}
