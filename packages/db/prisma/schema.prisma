generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum Tier {
  free
  pro
}

enum Role {
  member
  admin
}

enum FrameworkAdoptionStatus {
  in_progress
  completed
}

enum RequirementStatus {
  not_started
  in_progress
  compliant
}

enum RiskLevel {
  low
  medium
  high
}

enum AssessmentStatus {
  draft
  in_review
  final
}

enum ArtifactType {
  file
  integration
  other
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  full_name     String?
  email         String?   @unique
  role          Role      @default(member)
  onboarded     Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  lastLogin     DateTime?

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  accounts                Account[]
  sessions                Session[]
  OrganizationRequirement OrganizationRequirement[]
  Assessment              Assessment[]
  Risk                    Risk[]
  RiskMitigationTask      RiskMitigationTask[]
  RiskComment             RiskComment[]
  AuditLog                AuditLog[]

  @@index([organizationId])
}

model Organization {
  id               String  @id @default(cuid())
  stripeCustomerId String?
  name             String
  website          String
  tier             Tier    @default(free)

  users                 User[]
  OrganizationFramework OrganizationFramework[]
  Assessment            Assessment[]
  Risk                  Risk[]
  Artifact              Artifact[]
  AuditLog              AuditLog[]
  RiskMitigationTask    RiskMitigationTask[]

  @@index([stripeCustomerId])
}

model AuditLog {
  id String @id @default(cuid())

  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  data Json

  @@index([userId])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RequirementCategory {
  id          String  @id @default(cuid())
  name        String
  description String?

  requirements Requirement[]

  @@index([name])
}

model Framework {
  id          String  @id @default(cuid())
  name        String
  description String?

  requirements          Requirement[]
  OrganizationFramework OrganizationFramework[]
  Assessment            Assessment[]

  @@unique([name])
  @@index([name])
}

model Requirement {
  id          String  @id @default(cuid())
  name        String
  description String?

  frameworkId String
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  categoryId String?
  category   RequirementCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  organizationRequirements OrganizationRequirement[]

  evidenceDefinitions EvidenceDefinition[]
  sourceMappings      CrossFrameworkMapping[] @relation("source")
  targetMappings      CrossFrameworkMapping[] @relation("target")

  @@index([frameworkId])
  @@index([categoryId])
}

model OrganizationFramework {
  id String @id @default(cuid())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  frameworkId String
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  status FrameworkAdoptionStatus @default(in_progress)

  organizationRequirements OrganizationRequirement[]

  @@unique([organizationId, frameworkId])
  @@index([organizationId])
  @@index([frameworkId])
}

model OrganizationRequirement {
  id String @id @default(cuid())

  organizationFrameworkId String
  organizationFramework   OrganizationFramework @relation(fields: [organizationFrameworkId], references: [id], onDelete: Cascade)

  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  status    RequirementStatus @default(not_started)
  riskLevel RiskLevel?
  dueDate   DateTime?

  assignedOwnerId String?
  assignedOwner   User?   @relation(fields: [assignedOwnerId], references: [id], onDelete: SetNull)

  artifactRequirements              ArtifactRequirementPivot[]
  OrganizationRequirementAssessment OrganizationRequirementAssessment[]

  @@unique([organizationFrameworkId, requirementId])
  @@index([assignedOwnerId])
}

model EvidenceDefinition {
  id          String  @id @default(cuid())
  name        String
  description String?

  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  isRequired               Boolean                    @default(true)
  ArtifactRequirementPivot ArtifactRequirementPivot[]

  @@index([requirementId])
}

model Artifact {
  id         String       @id @default(cuid())
  name       String
  fileUrl    String?
  type       ArtifactType @default(file)
  uploadedAt DateTime     @default(now())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  artifactRequirements ArtifactRequirementPivot[]

  @@index([id, organizationId])
  @@index([type])
}

model ArtifactRequirementPivot {
  artifactId String
  artifact   Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  organizationRequirementId String
  organizationRequirement   OrganizationRequirement @relation(fields: [organizationRequirementId], references: [id], onDelete: Cascade)

  evidenceDefinitionId String?
  evidenceDefinition   EvidenceDefinition? @relation(fields: [evidenceDefinitionId], references: [id], onDelete: SetNull)

  @@id([artifactId, organizationRequirementId])
  @@index([organizationRequirementId])
  @@index([evidenceDefinitionId])
}

model Assessment {
  id String @id @default(cuid())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  frameworkId String
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate   DateTime
  status    AssessmentStatus @default(draft)

  assignedOwnerId String?
  assignedOwner   User?   @relation(fields: [assignedOwnerId], references: [id], onDelete: SetNull)

  organizationRequirementAssessments OrganizationRequirementAssessment[]

  @@index([organizationId])
  @@index([frameworkId])
}

model OrganizationRequirementAssessment {
  id String @id @default(cuid())

  organizationRequirementId String
  organizationRequirement   OrganizationRequirement @relation(fields: [organizationRequirementId], references: [id], onDelete: Cascade)

  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  status    RequirementStatus?
  riskLevel RiskLevel?
  dueDate   DateTime?
  notes     String?

  @@unique([organizationRequirementId, assessmentId])
  @@index([organizationRequirementId])
  @@index([assessmentId])
}

model CrossFrameworkMapping {
  id String @id @default(cuid())

  sourceRequirementId String
  sourceRequirement   Requirement @relation("source", fields: [sourceRequirementId], references: [id], onDelete: Cascade)

  targetRequirementId String
  targetRequirement   Requirement @relation("target", fields: [targetRequirementId], references: [id], onDelete: Cascade)

  notes String?

  @@unique([sourceRequirementId, targetRequirementId])
  @@index([sourceRequirementId])
  @@index([targetRequirementId])
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum Departments {
  none
  admin
  gov
  hr
  it
  itsm
  qms
}

enum TreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskStatus {
  open
  pending
  closed
  archived
}

enum RiskTaskStatus {
  open
  pending
  completed
}

model Risk {
  id                   String       @id @default(cuid())
  title                String
  description          String
  category             RiskCategory
  department           Departments?
  status               RiskStatus   @default(open)
  probability          Int          @default(0)
  impact               Int          @default(0)
  residual_probability Int          @default(0)
  residual_impact      Int          @default(0)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ownerId        String?
  owner          User?        @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  mitigationTasks   RiskMitigationTask[]
  comments          RiskComment[]
  treatmentStrategy RiskTreatmentStrategy?

  @@index([organizationId])
  @@index([ownerId])
  @@index([category])
  @@index([status])
}

model RiskMitigationTask {
  id          String         @id @default(cuid())
  title       String
  description String
  status      RiskTaskStatus @default(open)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  riskId  String
  risk    Risk    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([riskId])
  @@index([ownerId])
  @@index([organizationId])
}

model RiskComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  riskId   String
  risk     Risk   @relation(fields: [riskId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([riskId])
  @@index([authorId])
}

model RiskTreatmentStrategy {
  id          String        @id @default(cuid())
  type        TreatmentType
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  riskId String @unique
  risk   Risk   @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@index([riskId])
}
